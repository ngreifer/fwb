[{"path":"https://ngreifer.github.io/fwb/articles/fwb-rep.html","id":"case-1-no-parallelization-cl-null","dir":"Articles","previous_headings":"","what":"Case 1: No parallelization (cl = NULL)","title":"Reproducibility and Parallelization with `fwb`","text":"parallelization used (.e., cl unspecified, NULL, 1), need call set.seed() fwb() ensure reproducibility. doesn’t matter simple statistic . probably common case. Just run following ensure reproducibility, replacing ### favorite integer.","code":"set.seed(###)  f.out <- fwb(.)"},{"path":"https://ngreifer.github.io/fwb/articles/fwb-rep.html","id":"case-2-simple-false-non-random-statistic","dir":"Articles","previous_headings":"","what":"Case 2: simple = FALSE, non-random statistic","title":"Reproducibility and Parallelization with `fwb`","text":"simple = FALSE statistic random component, see Case 1, regardless whether parallelization used. case, random process occurs within cluster, special steps need taken beyond setting seed. Note simple TRUE default unless wtype = \"multinom\", must set manually. See code example:","code":"set.seed(###)  f.out <- fwb(., simple = FALSE)"},{"path":"https://ngreifer.github.io/fwb/articles/fwb-rep.html","id":"case-3-cl-is-an-integer","dir":"Articles","previous_headings":"","what":"Case 3: cl is an integer","title":"Reproducibility and Parallelization with `fwb`","text":"cl integer criteria Case 2 met, one additional step required ensuring reproducibility. , need use set.seed(), must call kind = \"L'Ecuyer-CMRG\", method appropriate use across multiple clusters. See code example:","code":"set.seed(###, \"L'Ecuyer-CMRG\")  f.out <- fwb(., cl = 3)"},{"path":"https://ngreifer.github.io/fwb/articles/fwb-rep.html","id":"case-4-cl-is-future","dir":"Articles","previous_headings":"","what":"Case 4: cl is \"future\"","title":"Reproducibility and Parallelization with `fwb`","text":"using future backend criteria Case met, can use solution Case 3. fwb() performs additional step make sure seed correctly sent future.apply::future_lapply(). (Internally, works setting future.seed = TRUE, .) See code example:","code":"library(future)  plan(multisession, workers = 3) set.seed(###, \"L'Ecuyer-CMRG\")  f.out <- fwb(., cl = \"future\")"},{"path":"https://ngreifer.github.io/fwb/articles/fwb-rep.html","id":"case-5-cl-is-a-cluster-object","dir":"Articles","previous_headings":"","what":"Case 5: cl is a cluster object","title":"Reproducibility and Parallelization with `fwb`","text":"cl cluster object (.e., output call parallel::makeCluster(), parallel::makePSOCKcluster(), parallel::makeForkCluster() similar functions parallelly), additional step need taken ensure reproducibility. Unfortunately, can’t use set.seed(); use parallel::clusterSetRNGStream(), supply cluster object desired seed. See code example:","code":"library(parallel)  cl <- makeCluster(3) clusterSetRNGStream(cl, ###)  f.out <- fwb(., cl = cl)"},{"path":"https://ngreifer.github.io/fwb/articles/fwb-rep.html","id":"computing-bca-confidence-intervals","dir":"Articles","previous_headings":"","what":"Computing BCa confidence intervals","title":"Reproducibility and Parallelization with `fwb`","text":"Although main purpose considering reproducibility ensure multiple runs code produce identical results, another situation can important able reproduce weights, computing BCa confidence intervals using fwb.ci(., type = \"bca\") summary(., ci.type = \"bca\"). BCa confidence intervals best statistical properties among available bootstrap confidence intervals, require computing influence unit bootstrap estimates, requires re-generating weights generated fwb(). cases don’t special work ensure BCa intervals correctly computed. include * simple = FALSE, regardless parallelization randomness statistic * simple = TRUE, randomness statistic, parallelization used * simple = TRUE, randomness statistic, cl integer \"future\" cases, fwb() saves state random seed used originally generate weights, recalls seed re-generate weights, computes required statistics BCa interval without requiring extra involvement user. Otherwise, following condition met, additional step required: * simple = TRUE, randomness statistic, cl cluster object case, need call clusterSetRNGStream(cl, ###) seed used prior fwb() immediately calling fwb.ci() summary(). simple = TRUE randomness statistic, possible re-generate weights used bootstrap, BCa confidence intervals computed. fwb.ci() (summary() confint(), call fwb.ci()) automatically checks case throws error BCa confidence intervals requested conditions met.","code":""},{"path":"https://ngreifer.github.io/fwb/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Noah Greifer. Author, maintainer.","code":""},{"path":"https://ngreifer.github.io/fwb/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Greifer N (2025). fwb: Fractional Weighted Bootstrap. R package version 0.3.0, https://ngreifer.github.io/fwb/, https://github.com/ngreifer/fwb.","code":"@Manual{,   title = {fwb: Fractional Weighted Bootstrap},   author = {Noah Greifer},   year = {2025},   note = {R package version 0.3.0,     https://ngreifer.github.io/fwb/},   url = {https://github.com/ngreifer/fwb}, }"},{"path":"https://ngreifer.github.io/fwb/index.html","id":"fwb-fractional-weighted-bootstrap","dir":"","previous_headings":"","what":"Fractional Weighted Bootstrap","title":"Fractional Weighted Bootstrap","text":"fwb implements fractional weighted bootstrap (FWB), also known Bayesian bootstrap, following treatment Xu et al. (2020). FWB involves generating sets weights uniform Dirichlet distribution used estimating statistics interest, yields posterior distribution can interpreted way traditional (resampling-based) bootstrap distribution can . primary function fwb(), essentially drop-boot::boot() takes dataset function applies function dataset randomly generated set case weights. Also included fwb.ci(), drop-boot::boot.ci() computing various kinds confidence intervals (e.g., percentile, normal, bias-corrected percentile, etc.), vcovFWB(), drop-sandwich::vcovBS() computing coefficient covariance matrix regression model using FWB. Check fwb website!","code":""},{"path":"https://ngreifer.github.io/fwb/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fractional Weighted Bootstrap","text":"can install current stable version fwb CRAN : can install development version fwb GitHub :","code":"install.packages(\"fwb\") # install.packages(\"remotes\") remotes::install_github(\"ngreifer/fwb\")"},{"path":"https://ngreifer.github.io/fwb/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Fractional Weighted Bootstrap","text":"examples use fwb. set seed ensure results replicable. (Note parallel processing used, special kind seed needs set; see vignette(\"fwb-rep\") details.)","code":"library(\"fwb\") set.seed(123456, \"L'Ecuyer-CMRG\")"},{"path":"https://ngreifer.github.io/fwb/index.html","id":"bearing-cage-field-failure-weibull-analysis-from-xu-et-al-2020","dir":"","previous_headings":"Examples","what":"Bearing cage field failure Weibull analysis from Xu et al. (2020)","title":"Fractional Weighted Bootstrap","text":"example involves performing Weibull analysis estimate β\\beta (shape) parameter Weibull distribution characterizing time failure set aircraft engines. Among 1703 engines, 6 failures 1697 right-censored observations. traditional (resampling-based) bootstrap fail bootstrap replication omitted 6 failures, failures retained using FWB, makes particularly effective analysis.","code":"data(\"bearingcage\", package = \"fwb\")  # Function to compute the scale (eta) and shape (beta) parameters # from weighted data weibull_est <- function(data, w) {   fit <- survival::survreg(survival::Surv(hours, failure) ~ 1,                            data = data, weights = w,                            dist = \"weibull\")    c(eta = unname(exp(coef(fit))), beta = 1 / fit$scale) }  # 1999 bootstrap replications; more is always better fwb_est <- fwb(bearingcage, statistic = weibull_est,                 R = 1999, verbose = FALSE) fwb_est #> FRACTIONAL WEIGHTED BOOTSTRAP #>  #> Call: #> fwb(data = bearingcage, statistic = weibull_est, R = 1999, verbose = FALSE) #>  #> Bootstrap Statistics : #>          original         bias   std. error #> eta  11792.178173 7722.5390790 2.652048e+04 #> beta     2.035319    0.2326988 8.790395e-01  # Bias-corrected accelerated percentile # confidence interval summary(fwb_est, ci.type = \"bca\") #>      Estimate Std. Error CI 2.5 % CI 97.5 % #> eta  1.18e+04   2.65e+04 3.15e+03  7.17e+04 #> beta 2.04e+00   8.79e-01 1.24e+00  4.55e+00  # Plot the bootstrap distribution plot(fwb_est, index = \"beta\", qdist = \"chisq\")"},{"path":"https://ngreifer.github.io/fwb/index.html","id":"infertility-logistic-regression-analysis-using-infert-dataset","dir":"","previous_headings":"Examples","what":"Infertility logistic regression analysis using infert dataset","title":"Fractional Weighted Bootstrap","text":"example demonstrates using vcovFWB() estimate standard errors effect spontaneous induced abortions infertility analyzed Trichopoulos et al. (1976). Patients organized matched sets 3 patients . use fixed effects logistic regression adjust matched set membership (ignoring potential bias approach sake example). traditional bootstrap fails many matched sets fully omit either cases non-cases, leading perfect prediction failure model converge, yielding invalid estimates. units retained using FWB, model always converges estimates reasonable. can also perform cluster-robust inference bootstrapping strata. (Note case traditional bootstrap fine, FWB still accurate.) Let’s look -depth results traditional fractional weighted bootstrap comparing output fwb() boot::boot(). (Note traditional bootstrap can also requested using fwb(., wtype = \"multinom\"), give identical results boot::boot() seed set.) Already bias standard errors indicate problems traditional bootstrap. Let’s plot histograms estimates see failure :   clear estimates traditional bootstrap pathological, whereas estimates FWB reasonable. non-normality FWB distributions also suggests usual Wald-style confidence intervals may accurate, bias-corrected percentile interval probably computed instead.","code":"data(\"infert\")  fit <- glm(case ~ spontaneous + induced + factor(stratum),            data = infert, family = quasibinomial())  library(\"lmtest\")  # The traditional bootstrap fails coeftest(fit, vcov = sandwich::vcovBS)[1:3, ] #>              Estimate   Std. Error       z value Pr(>|z|) #> (Intercept) -6.904101 2.285991e+22 -3.020179e-22        1 #> spontaneous  3.230286 1.670378e+14  1.933866e-14        1 #> induced      2.190303 1.194912e+14  1.833025e-14        1  # The fractional weighted bootstrap succeeds coeftest(fit, vcov = vcovFWB)[1:3, ] #>              Estimate Std. Error   z value     Pr(>|z|) #> (Intercept) -6.904101  1.8325484 -3.767486 1.648995e-04 #> spontaneous  3.230286  0.7493112  4.311007 1.625127e-05 #> induced      2.190303  0.6880744  3.183235 1.456391e-03 # Including stratum membership as a clustering variable coeftest(fit, vcov = vcovFWB, cluster = ~stratum)[1:3, ] #>              Estimate Std. Error   z value     Pr(>|z|) #> (Intercept) -6.904101  1.6343290 -4.224426 2.395510e-05 #> spontaneous  3.230286  0.7317966  4.414185 1.013912e-05 #> induced      2.190303  0.6745283  3.247162 1.165621e-03 fit_fun <- function(data, w) {   fit <- glm(case ~ spontaneous + induced + factor(stratum),            data = data, weights = w, family = quasibinomial())   coef(fit)[1:3] }  boot_est <- boot::boot(infert, fit_fun, R = 999, stype = \"f\") boot_est #>  #> ORDINARY NONPARAMETRIC BOOTSTRAP #>  #>  #> Call: #> boot::boot(data = infert, statistic = fit_fun, R = 999, stype = \"f\") #>  #>  #> Bootstrap Statistics : #>      original       bias     std. error #> t1* -6.904101 2.629510e+21 8.083197e+22 #> t2*  3.230286 2.114656e+13 2.336509e+14 #> t3*  2.190303 1.696351e+13 1.878001e+14  fwb_est <- fwb(infert, fit_fun, R = 999, verbose = FALSE) fwb_est #> FRACTIONAL WEIGHTED BOOTSTRAP #>  #> Call: #> fwb(data = infert, statistic = fit_fun, R = 999, verbose = FALSE) #>  #> Bootstrap Statistics : #>              original       bias std. error #> (Intercept) -6.904101 -1.7026157  1.8743631 #> spontaneous  3.230286  0.7069076  0.7657147 #> induced      2.190303  0.5690742  0.7096401 plot(boot_est, index = 2) plot(fwb_est, index = 2)"},{"path":"https://ngreifer.github.io/fwb/index.html","id":"when-to-use-the-fractional-weighted-bootstrap","dir":"","previous_headings":"","what":"When to use the fractional weighted bootstrap","title":"Fractional Weighted Bootstrap","text":"FWB uniformly reliable traditional bootstrap weighted statistic can computed (though doesn’t mean bootstrap always valid). simple cases, methods yield results. pathological examples like , FWB dramatically outperforms traditional bootstrap. true running regression models sparse categorical variables either outcome among predictors, example, estimating fixed effects binary outcome rare. However, important know weighted statistic can computed; example, computing weighted median always straightforward, making traditional bootstrap potentially useful computing . Still, though, FWB deserves place analyst’s toolbox.","code":""},{"path":"https://ngreifer.github.io/fwb/index.html","id":"related-packages","dir":"","previous_headings":"","what":"Related packages","title":"Fractional Weighted Bootstrap","text":"boot, provides traditional bootstrap, including interface accepts frequency weights compute weighted statistics, used bayesboot, also provides functionality Bayesian bootstrap explicitly Bayesian fashion returned objects less consistent boot","code":""},{"path":"https://ngreifer.github.io/fwb/index.html","id":"author","dir":"","previous_headings":"","what":"Author","title":"Fractional Weighted Bootstrap","text":"Noah Greifer (noah.greifer@gmail.com)","code":""},{"path":"https://ngreifer.github.io/fwb/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Fractional Weighted Bootstrap","text":"Trichopoulos, D., Handanos, N., Danezis, J., Kalandidi, . Kalapothaki, V. (1976), Induced Abortion Secondary Infertility. BJOG: International Journal Obstetrics & Gynaecology, 83, 645-650. https://doi.org/10.1111/j.1471-0528.1976.tb00904.x Xu, L., Gotwalt, C., Hong, Y., King, C. B., & Meeker, W. Q. (2020). Applications Fractional-Random-Weight Bootstrap. American Statistician, 74(4), 345–358. https://doi.org/10.1080/00031305.2020.1731599","code":""},{"path":"https://ngreifer.github.io/fwb/reference/bearingcage.html","id":null,"dir":"Reference","previous_headings":"","what":"Bearing Cage field failure data — bearingcage","title":"Bearing Cage field failure data — bearingcage","text":"data consist 1703 aircraft engines put service time. 6 failures 1697 right-censored observations. data originally given Abernethy et al. (1983) reanalyzed Meeker Escobar (1998, chap.8). dataset used specifically comes Xu et al. (2020) used Weibull analysis failure times.","code":""},{"path":"https://ngreifer.github.io/fwb/reference/bearingcage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bearing Cage field failure data — bearingcage","text":"","code":"data(\"bearingcage\")"},{"path":"https://ngreifer.github.io/fwb/reference/bearingcage.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bearing Cage field failure data — bearingcage","text":"data frame 1703 rows 2 variables: hours integer; number hours failure censoring failure logical; whether failure occurred","code":""},{"path":"https://ngreifer.github.io/fwb/reference/bearingcage.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bearing Cage field failure data — bearingcage","text":"Abernethy, R. B., Breneman, J. E., Medlin, C. H., Reinman, G. L. (1983), \"Weibull Analysis Handbook,\" Technical Report, Air Force Wright Aeronautical Laboratories, available https://apps.dtic.mil/sti/citations/ADA143100. Meeker, W. Q., Escobar, L. . (1998), Statistical Methods Reliability Data, New York: Wiley. Xu, L., Gotwalt, C., Hong, Y., King, C. B., & Meeker, W. Q. (2020). Applications Fractional-Random-Weight Bootstrap. American Statistician, 74(4), 345–358. doi:10.1080/00031305.2020.1731599","code":""},{"path":"https://ngreifer.github.io/fwb/reference/fwb-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fwb: Fractional Weighted Bootstrap — fwb-package","title":"fwb: Fractional Weighted Bootstrap — fwb-package","text":"implementation fractional weighted bootstrap used drop-functions 'boot' package. fractional weighted bootstrap (also known Bayesian bootstrap) involves drawing weights randomly applied data rather resampling units data. See Xu et al. (2020) doi:10.1080/00031305.2020.1731599  details.","code":""},{"path":"https://ngreifer.github.io/fwb/reference/fwb-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"fwb: Fractional Weighted Bootstrap — fwb-package","text":"Xu, L., Gotwalt, C., Hong, Y., King, C. B., & Meeker, W. Q. (2020). Applications Fractional-Random-Weight Bootstrap. American Statistician, 74(4), 345–358. doi:10.1080/00031305.2020.1731599","code":""},{"path":[]},{"path":"https://ngreifer.github.io/fwb/reference/fwb-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fwb: Fractional Weighted Bootstrap — fwb-package","text":"Maintainer: Noah Greifer noah.greifer@gmail.com (ORCID)","code":""},{"path":"https://ngreifer.github.io/fwb/reference/fwb.ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Fractional Weighted Bootstrap Confidence Intervals — fwb.ci","title":"Fractional Weighted Bootstrap Confidence Intervals — fwb.ci","text":"fwb.ci() generates several types equi-tailed two-sided nonparametric confidence intervals. include normal approximation, basic bootstrap interval, percentile bootstrap interval, bias-corrected percentile bootstrap interval, bias-correct accelerated (BCa) bootstrap interval.","code":""},{"path":"https://ngreifer.github.io/fwb/reference/fwb.ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fractional Weighted Bootstrap Confidence Intervals — fwb.ci","text":"","code":"fwb.ci(   fwb.out,   conf = 0.95,   type = \"bc\",   index = 1L,   h = base::identity,   hinv = base::identity,   ... )  # S3 method for class 'fwbci' print(x, hinv = NULL, ...)"},{"path":"https://ngreifer.github.io/fwb/reference/fwb.ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fractional Weighted Bootstrap Confidence Intervals — fwb.ci","text":"fwb.fwb object; output call fwb(). conf desired confidence level. Default .95 95% confidence intervals. type type confidence interval desired. Allowable options include \"norm\" (normal approximation), \"basic\" (basic interval), \"perc\" (percentile interval), \"bc\" (bias-correct percentile interval), \"bca\" (BCa interval). one allowed. Can also \"\" request . BCa intervals require number bootstrap replications larger sample size. index index position quantity interest fwb.$t0 one specified fwb(). one value allowed time. default first statistic used. h function defining transformation. intervals calculated scale h(t) inverse function hinv applied resulting intervals. must function one variable vector argument, must return vector length. Default identity function. hinv function, like h, returns inverse h. used transform intervals calculated scale h(t) back original scale. default identity function. h supplied hinv , intervals returned transformed scale. ... ignored x fwbci object; output call fwb.ci().","code":""},{"path":"https://ngreifer.github.io/fwb/reference/fwb.ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fractional Weighted Bootstrap Confidence Intervals — fwb.ci","text":"fwbci object, inherits bootci following components: R number bootstrap replications original call fwb(). t0 observed value statistic scale intervals (.e., applying h hinv. call call fwb.ci(). additional components named confidence interval type requested. \"norm\", matrix one row containing confidence level two confidence interval limits. others, matrix one row containing confidence level, indices two order statistics used calculations, confidence interval limits.","code":""},{"path":"https://ngreifer.github.io/fwb/reference/fwb.ci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fractional Weighted Bootstrap Confidence Intervals — fwb.ci","text":"fwb.ci() functions similarly bootboot.ci takes bootstrapped object computes confidence intervals. interface bit old-fashioned, designed mimic boot.ci(). modern interface, see summary.fwb(). bootstrap intervals defined follows, \\(\\alpha =\\) 1 - conf, \\(t_0\\) estimate original sample, \\(\\hat{t}\\) average bootstrap estimates, \\(s_t\\) standard deviation bootstrap estimates, \\(t^{()}\\) set ordered estimates \\(\\) corresponding quantile, \\(z_\\frac{\\alpha}{2}\\) \\(z_{1-\\frac{\\alpha}{2}}\\) upper lower critical \\(z\\) scores. \"norm\" (normal approximation): \\([2t_0 - \\hat{t} + s_t z_\\frac{\\alpha}{2}, 2t_0 - \\hat{t} + s_t z_{1-\\frac{\\alpha}{2}}]\\) involves subtracting \"bias\" (\\(\\hat{t} - t_0\\)) estimate \\(t_0\\) using standard Wald-type confidence interval. method valid statistic normally distributed. \"basic\": \\([2t_0 - t^{(1-\\frac{\\alpha}{2})}, 2t_0 - t^{(\\frac{\\alpha}{2})}]\\) \"perc\" (percentile confidence interval): \\([t^{(\\frac{\\alpha}{2})}, t^{(1-\\frac{\\alpha}{2})}]\\) \"bc\" (bias-corrected percentile confidence interval): \\([t^{(l)}, t^{(u)}]\\) \\(l = \\Phi\\left(2z_0 + z_\\frac{\\alpha}{2}\\right)\\), \\(u = \\Phi\\left(2z_0 + z_{1-\\frac{\\alpha}{2}}\\right)\\), \\(\\Phi(.)\\) normal cumulative density function (.e., pnorm()) \\(z_0 = \\Phi^{-1}(q)\\) \\(q\\) proportion bootstrap estimates less original estimate \\(t_0\\). similar percentile confidence interval changes specific quantiles bootstrap estimates use, correcting bias original estimate. described Xu et al. (2020). \\(t^0\\) median bootstrap distribution, \"perc\" \"bc\" intervals coincide. \"bca\" (bias-corrected accelerated confidence interval): \\([t^{(l)}, t^{(u)}]\\) \\(l = \\Phi\\left(z_0 + \\frac{z_0 + z_\\frac{\\alpha}{2}}{1-(z_0+z_\\frac{\\alpha}{2})}\\right)\\), \\(u = \\Phi\\left(z_0 + \\frac{z_0 + z_{1-\\frac{\\alpha}{2}}}{1-(z_0+z_{1-\\frac{\\alpha}{2}})}\\right)\\), using definitions , additional acceleration parameter \\(\\), \\(= \\frac{1}{6}\\frac{\\sum{L^3}}{(\\sum{L^2})^{3/2}}\\). \\(L\\) empirical influence value unit, computed using regression method described bootempinf. \\(=0\\), \"bca\" \"bc\" intervals coincide. acceleration parameter corrects bias skewness statistic. can used clusters absent number bootstrap replications larger sample size. Note BCa intervals requested simple = TRUE randomness thew statistic supplied fwb(). Interpolation normal quantile scale used non-integer order statistic required, boot::boot.ci(). Note unlike boot::boot.ci(), studentized confidence intervals (type = \"stud\") allowed.","code":""},{"path":"https://ngreifer.github.io/fwb/reference/fwb.ci.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Fractional Weighted Bootstrap Confidence Intervals — fwb.ci","text":"print(fwbci): Print bootstrap confidence interval","code":""},{"path":[]},{"path":"https://ngreifer.github.io/fwb/reference/fwb.ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fractional Weighted Bootstrap Confidence Intervals — fwb.ci","text":"","code":"set.seed(123, \"L'Ecuyer-CMRG\") data(\"infert\")  fit_fun <- function(data, w) {   fit <- glm(case ~ spontaneous + induced, data = data,              family = \"quasibinomial\", weights = w)   coef(fit) }  fwb_out <- fwb(infert, fit_fun, R = 199, verbose = FALSE)  # Bias corrected percentile interval bcci <- fwb.ci(fwb_out, index = \"spontaneous\", type = \"bc\") bcci #> BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS #> Based on 199 bootstrap replicates #>  #> CALL :  #> fwb.ci(fwb.out = fwb_out, type = \"bc\", index = \"spontaneous\") #>  #> Intervals :  #> Level BC Percentile   #> 95%   ( 0.745,  1.638 )   #> Calculations and Intervals on Original Scale #> Some bias-corrected percentile intervals may be unstable  # Using `get_ci()` to extract confidence limits  get_ci(bcci) #> $bc #>         L         U  #> 0.7453669 1.6378339  #>  #> attr(,\"conf\") #> [1] 0.95  # Interval calculated on original (log odds) scale, # then transformed by exponentiation to be on OR fwb.ci(fwb_out, index = \"induced\", type = \"norm\",        hinv = exp) #> BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS #> Based on 199 bootstrap replicates #>  #> CALL :  #> fwb.ci(fwb.out = fwb_out, type = \"norm\", index = \"induced\", hinv = exp) #>  #> Intervals :  #> Level       Normal    #> 95%   ( 1.029,  2.232 )   #> Calculations on Original Scale  but Intervals Transformed"},{"path":"https://ngreifer.github.io/fwb/reference/fwb.html","id":null,"dir":"Reference","previous_headings":"","what":"Fractional Weighted Bootstrap — fwb","title":"Fractional Weighted Bootstrap — fwb","text":"fwb() implements fractional (random) weighted bootstrap, also known Bayesian bootstrap. Rather resampling units include bootstrap samples, weights drawn applied weighted estimator.","code":""},{"path":"https://ngreifer.github.io/fwb/reference/fwb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fractional Weighted Bootstrap — fwb","text":"","code":"fwb(   data,   statistic,   R = 999,   cluster = NULL,   simple = NULL,   wtype = getOption(\"fwb_wtype\", \"exp\"),   strata = NULL,   drop0 = FALSE,   verbose = TRUE,   cl = NULL,   ... )  # S3 method for class 'fwb' print(x, digits = getOption(\"digits\"), index = 1L:ncol(x$t), ...)"},{"path":"https://ngreifer.github.io/fwb/reference/fwb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fractional Weighted Bootstrap — fwb","text":"data dataset used compute statistic statistic function, , applied data, returns vector containing statistic(s) interest. function take least two arguments; first argument correspond dataset second argument correspond vector weights. arguments can passed statistic ... argument. R number bootstrap replicates. Default 999 always better. percentile bootstrap confidence interval exact, can beneficial use one less multiple 100. cluster optional; vector containing cluster membership. supplied, run cluster bootstrap. See Details. Evaluated first data global environment. simple logical; TRUE, weights generated --fly bootstrap replication; FALSE, weights generated supplied statistic. TRUE wtype = \"multinom\". default (NULL) sets FALSE wtype = \"multinom\" TRUE otherwise. wtype string; type weights use. Allowable options include \"exp\" (default), \"pois\", \"multinom\", \"mammen\". See Details. See set_fwb_wtype() set global default. strata optional; vector containing stratum membership stratified bootstrapping. supplied, essentially perform separate bootstrap within level strata. affect results wtype = \"poisson\". drop0 logical; wtype \"multinom\" \"poisson\", whether drop units given weights 0 dataset weights supplied statistic iteration. Ignored wtypes produce 0 weights. Default FALSE. verbose logical; whether display progress bar. cl cluster object created parallelmakeCluster, integer indicate number child-processes (integer values ignored Windows) parallel evaluations, string \"future\" use future backend. See cl argument pbapplypblapply details. NULL, parallelization take place. See vignette(\"fwb-rep\") details. ... arguments passed statistic. x fwb object; output call fwb(). digits number significant digits print index index indices position quantity interest x$t0 one specified fwb(). Default print quantities.","code":""},{"path":"https://ngreifer.github.io/fwb/reference/fwb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fractional Weighted Bootstrap — fwb","text":"fwb object, also inherits boot, following components: t0 observed value statistic applied data uniform weights. t matrix R rows, bootstrap replicate result calling statistic. R value R passed fwb(). data data passed fwb(). seed value .Random.seed just prior generating weights (first call statistic uniform weights). statistic function statistic passed fwb(). call original call fwb(). cluster vector passed cluster, . strata vector passed strata, . wtype type weights used determined wtype argument.","code":""},{"path":"https://ngreifer.github.io/fwb/reference/fwb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fractional Weighted Bootstrap — fwb","text":"fwb() implements fractional weighted bootstrap meant function drop-boot::boot(., stype = \"f\") (.e., usual bootstrap frequency weights representing number times unit drawn). bootstrap replication, wtype = \"exp\" (default), weights sampled independent exponential distributions rate parameter 1 normalized mean 1, equivalent drawing weights Dirichlet distribution. weights allowed determined wtype argument (see details). function supplied statistic must incorporate weights compute weighted statistic. example, output regression coefficient, weights supplied w argument statistic supplied weights argument lm(). weights used time frequency weights , since meant function like frequency weights (, case traditional bootstrap, integers). Unfortunately, way fwb() know whether using weights correctly, care taken ensure weights correctly incorporated estimator. fitting binomial regression models (e.g., logistic) using glm(), may useful change family \"quasi\" variety (e.g., quasibinomial()) avoid spurious warning \"non-integer #successes\". cluster bootstrap can requested supplying vector cluster membership cluster. Rather generating weight unit, weight generated cluster applied units cluster. Bootstrapping can performed within strata supplying vector stratum membership strata. essentially rescales weights within stratum mean 1, ensuring sum weights stratum equal stratum size. multinomial weights, using strata equivalent drawing samples replacement stratum. Strata affect bootstrapping using Poisson weights. Ideally, statistic involve random element, else straightforward replicate bootstrap results using seed included output object. Setting seed using set.seed() always advised. See vignette(\"fwb-rep\") details. print() method displays value statistics, bias (difference statistic mean bootstrap distribution), standard error (standard deviation bootstrap distribution).","code":""},{"path":"https://ngreifer.github.io/fwb/reference/fwb.html","id":"weight-types","dir":"Reference","previous_headings":"","what":"Weight types","title":"Fractional Weighted Bootstrap — fwb","text":"Different types weights can supplied wtype argument. global default can set using set_fwb_wtype(). allowable weight types described . \"exp\" Draws weights exponential distribution rate parameter 1 using rexp(). weights usual \"Bayesian bootstrap\" weights described Xu et al. (2020). equivalent drawing weights uniform Dirichlet distribution, gives weights interpretation Bayesian prior. weights scaled mean 1 within stratum (full sample strata supplied). \"multinom\" Draws integer weights using sample(), samples unit indices replacement uses tabulation indices frequency weights. equivalent drawing weights multinomial distribution. Using wtype = \"multinom\" using boot::boot(., stype = \"f\") instead fwb() (.e., resulting estimates identical). strata supplied, unit indices drawn replacement within stratum sum weights stratum equal stratum size. \"poisson\" Draws integer weights Poisson distribution 1 degree freedom using rpois(). alternative multinomial weights yields similar estimates (especially sample size grows) can faster. Note strata ignored using \"poisson\". \"mammen\" Draws weights modification distribution described Mammen (1983) use wild bootstrap. positive weights mean, variance, skewness 1, making second-order accurate (contrast usual exponential weights, first-order accurate). weights \\(w\\) drawn \\(P(w=(3+\\sqrt{5})/2)=(\\sqrt{5}-1)/2\\sqrt{5}\\) \\(P(w=(3-\\sqrt{5})/2)=(\\sqrt{5}+1)/2\\sqrt{5}\\). weights scaled mean 1 within stratum (full sample strata supplied). \"exp\" default due formulation described Xu et al. (2020) formulations Bayesian bootstrap; used one wants remain line guidelines maintain Bayesian flavor analysis, whereas \"mammen\" might preferred frequentist operating characteristics, though performance studied context. \"multinom\" \"poisson\" used comparison purposes.","code":""},{"path":"https://ngreifer.github.io/fwb/reference/fwb.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Fractional Weighted Bootstrap — fwb","text":"print(fwb): Print fwb object","code":""},{"path":"https://ngreifer.github.io/fwb/reference/fwb.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fractional Weighted Bootstrap — fwb","text":"Mammen, E. (1993). Bootstrap Wild Bootstrap High Dimensional Linear Models. Annals Statistics, 21(1). doi:10.1214/aos/1176349025 Rubin, D. B. (1981). Bayesian Bootstrap. Annals Statistics, 9(1), 130–134. doi:10.1214/aos/1176345338 Xu, L., Gotwalt, C., Hong, Y., King, C. B., & Meeker, W. Q. (2020). Applications Fractional-Random-Weight Bootstrap. American Statistician, 74(4), 345–358. doi:10.1080/00031305.2020.1731599 use \"mammen\" formulation bootstrap weights suggested Lihua Lei .","code":""},{"path":[]},{"path":"https://ngreifer.github.io/fwb/reference/fwb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fractional Weighted Bootstrap — fwb","text":"","code":"# Performing a Weibull analysis of the Bearing Cage # failure data as done in Xu et al. (2020) set.seed(123, \"L'Ecuyer-CMRG\") data(\"bearingcage\")  weibull_est <- function(data, w) {   fit <- survival::survreg(survival::Surv(hours, failure) ~ 1,                            data = data, weights = w,                            dist = \"weibull\")    c(eta = unname(exp(coef(fit))), beta = 1/fit$scale) }  boot_est <- fwb(bearingcage, statistic = weibull_est,                 R = 199, verbose = FALSE) boot_est #> FRACTIONAL WEIGHTED BOOTSTRAP #>  #> Call: #> fwb(data = bearingcage, statistic = weibull_est, R = 199, verbose = FALSE) #>  #> Bootstrap Statistics : #>          original         bias   std. error #> eta  11792.178173 6576.7323747 2.102547e+04 #> beta     2.035319    0.2416885 8.668478e-01  #Get standard errors and CIs; uses bias-corrected #percentile CI by default summary(boot_est, ci.type = \"bc\") #>      Estimate Std. Error CI 2.5 % CI 97.5 % #> eta  1.18e+04   2.10e+04 3.08e+03  6.83e+04 #> beta 2.04e+00   8.67e-01 1.23e+00  4.66e+00  #Plot statistic distributions plot(boot_est, index = \"beta\", type = \"hist\")"},{"path":"https://ngreifer.github.io/fwb/reference/get_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Confidence Intervals from a bootci Object — get_ci","title":"Extract Confidence Intervals from a bootci Object — get_ci","text":"get_ci() extracts confidence intervals output call bootboot.ci fwb.ci() clean way. Normally confidence intervals can bit challenging extract unusual structure object.","code":""},{"path":"https://ngreifer.github.io/fwb/reference/get_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Confidence Intervals from a bootci Object — get_ci","text":"","code":"get_ci(x, type = \"all\")"},{"path":"https://ngreifer.github.io/fwb/reference/get_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Confidence Intervals from a bootci Object — get_ci","text":"x bootci object; output call boot::boot.ci() fwb.ci(). type type confidence intervals extract. available x allowed. given subset types passed type boot.ci() fwb.ci(). default, \"\", extracts confidence intervals x.","code":""},{"path":"https://ngreifer.github.io/fwb/reference/get_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Confidence Intervals from a bootci Object — get_ci","text":"list entry confidence interval type; entry numeric vector length 2 names \"L\" \"U\" lower upper interval bounds, respectively. \"conf\" attribute contains confidence level.","code":""},{"path":[]},{"path":"https://ngreifer.github.io/fwb/reference/get_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Confidence Intervals from a bootci Object — get_ci","text":"","code":"#See example at help(\"fwb.ci\")"},{"path":"https://ngreifer.github.io/fwb/reference/plot.fwb.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots of the Output of a Fractional Weighted Bootstrap — plot.fwb","title":"Plots of the Output of a Fractional Weighted Bootstrap — plot.fwb","text":"plot.fwb() takes fwb object produces plots bootstrap replicates statistic interest.","code":""},{"path":"https://ngreifer.github.io/fwb/reference/plot.fwb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots of the Output of a Fractional Weighted Bootstrap — plot.fwb","text":"","code":"# S3 method for class 'fwb' plot(   x,   index = 1,   qdist = \"norm\",   nclass = NULL,   df,   type = c(\"hist\", \"qq\"),   ... )"},{"path":"https://ngreifer.github.io/fwb/reference/plot.fwb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots of the Output of a Fractional Weighted Bootstrap — plot.fwb","text":"x fwb object; output call fwb(). index index position quantity interest x$t0 one specified fwb(). one value allowed time. default first statistic used. qdist character; Q-Q plot requested (default; see type argument ), distribution Q-Q plot drawn. Allowable options include \"norm\" (normal distribution - default) \"chisq\" (chi-squared distribution). nclass histogram requested (default; see type argument ), number classes used. default integer 10 100 closest ceiling(length(R)/25) R number bootstrap replicates. df qdist \"chisq\", degrees freedom chi-squared distribution used. supplied, degrees freedom estimated using maximum likelihood. type type plot display. Allowable options include \"hist\" histogram bootstrap estimates \"qq\" Q-Q plot estimates distribution supplied qdist. ... ignored.","code":""},{"path":"https://ngreifer.github.io/fwb/reference/plot.fwb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots of the Output of a Fractional Weighted Bootstrap — plot.fwb","text":"x returned invisibly.","code":""},{"path":"https://ngreifer.github.io/fwb/reference/plot.fwb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plots of the Output of a Fractional Weighted Bootstrap — plot.fwb","text":"function can produces two side--side plots: histogram bootstrap replicates Q-Q plot bootstrap replicates theoretical quantiles supplied distribution (normal chi-squared). histogram, vertical dotted line indicates position estimate computed original sample. Q-Q plot, expected line plotted.","code":""},{"path":[]},{"path":"https://ngreifer.github.io/fwb/reference/plot.fwb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots of the Output of a Fractional Weighted Bootstrap — plot.fwb","text":"","code":"# See examples at help(\"fwb\")"},{"path":"https://ngreifer.github.io/fwb/reference/set_fwb_wtype.html","id":null,"dir":"Reference","previous_headings":"","what":"Set weights type — set_fwb_wtype","title":"Set weights type — set_fwb_wtype","text":"Set default type weights used weighted bootstrap computed fwb() vcovFWB().","code":""},{"path":"https://ngreifer.github.io/fwb/reference/set_fwb_wtype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set weights type — set_fwb_wtype","text":"","code":"set_fwb_wtype(wtype = getOption(\"fwb_wtype\", \"exp\"))  get_fwb_wtype(fwb)"},{"path":"https://ngreifer.github.io/fwb/reference/set_fwb_wtype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set weights type — set_fwb_wtype","text":"wtype string; type weights use. Allowable options include \"exp\" (default), \"pois\", \"multinom\", \"mammen\". Abbreviations allowed. See fwb() mean. fwb optional; fwb object, output call fwb(). left empty, extract weights type options().","code":""},{"path":"https://ngreifer.github.io/fwb/reference/set_fwb_wtype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set weights type — set_fwb_wtype","text":"set_fwb_wtype() returns call options() options set prior set_fwb_wtype() called. makes calling options(op), op output set_fwb_wtype(), resets fwb_wtype original value. get_fwb_wtype() returns string containing fwb_wtype value set globally (argument supplied) used supplied fwb object.","code":""},{"path":"https://ngreifer.github.io/fwb/reference/set_fwb_wtype.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set weights type — set_fwb_wtype","text":"set_fwb_wtype(x) equivalent calling options(fwb_wtype = x). get_fwb_wtype() equivalent calling getOption(\"fwb_wtype\") argument supplied extracting wtype component fwb object supplied.","code":""},{"path":[]},{"path":"https://ngreifer.github.io/fwb/reference/set_fwb_wtype.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set weights type — set_fwb_wtype","text":"","code":"# Performing a Weibull analysis of the Bearing Cage # failure data as done in Xu et al. (2020) set.seed(123, \"L'Ecuyer-CMRG\") data(\"bearingcage\")  #Set fwb type to \"mammen\" op <- set_fwb_wtype(\"mammen\")  weibull_est <- function(data, w) {   fit <- survival::survreg(survival::Surv(hours, failure) ~ 1,                            data = data, weights = w,                            dist = \"weibull\")    c(eta = unname(exp(coef(fit))), beta = 1/fit$scale) }  boot_est <- fwb(bearingcage, statistic = weibull_est,                 R = 199, verbose = FALSE) boot_est #> FRACTIONAL WEIGHTED BOOTSTRAP #>  #> Call: #> fwb(data = bearingcage, statistic = weibull_est, R = 199, verbose = FALSE) #>  #> Bootstrap Statistics : #>          original         bias  std. error #> eta  11792.178173 6565.9734530 17660.38925 #> beta     2.035319    0.3049851     0.93453  #Get the fwb type used in the bootstrap get_fwb_wtype(boot_est) #> [1] \"mammen\" get_fwb_wtype() #> [1] \"mammen\"  #Restore original options options(op)  get_fwb_wtype() #> [1] \"exp\""},{"path":"https://ngreifer.github.io/fwb/reference/summary.fwb.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize fwb Output — summary.fwb","title":"Summarize fwb Output — summary.fwb","text":"summary() creates regression summary-like table displays bootstrap estimates, empirical standard errors, confidence intervals. confint() produces just confidence intervals, computed using fwb.ci(), called internally summary().","code":""},{"path":"https://ngreifer.github.io/fwb/reference/summary.fwb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize fwb Output — summary.fwb","text":"","code":"# S3 method for class 'fwb' summary(   object,   conf = 0.95,   ci.type = \"bc\",   p.value = FALSE,   index = 1L:ncol(object$t),   ... )  # S3 method for class 'fwb' confint(object, parm, level = 0.95, ci.type = \"bc\", ...)"},{"path":"https://ngreifer.github.io/fwb/reference/summary.fwb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize fwb Output — summary.fwb","text":"object fwb object; output call fwb(). conf, level desired confidence level. Default .95 95% confidence intervals. ci.type type confidence interval desired. Allowable options include \"norm\" (normal approximation), \"basic\" (basic interval), \"perc\" (percentile interval), \"bc\" (bias-correct percentile interval), \"bca\" (bias-corrected accelerated [BCa] interval). one allowed. BCa intervals require number bootstrap replications larger sample size. See fwb.ci() details. default \"bc\". p.value logical; whether display p-values test parameter equal 0. p-value computed using Z-test test statistic computed ratio estimate bootstrap standard error. test valid bootstrap distribution normally distributed around 0 guaranteed agree confidence intervals. Default FALSE. index, parm index indices position quantity interest x$t0 one specified fwb(). Default display quantities. ... ignored.","code":""},{"path":"https://ngreifer.github.io/fwb/reference/summary.fwb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize fwb Output — summary.fwb","text":"summary(), summary.fwb object, matrix following columns: Estimate: statistic estimated original sample Std. Error: standard deviation bootstrap estimates CI {L}% CI {U}%, upper lower confidence interval bounds computed using argument ci.type. p.value = TRUE, two additional columns, z value Pr(>|z|), included containing z-statistic p-value computed statistic, respectively. confint(), matrix row statistic column upper lower confidence interval limits.","code":""},{"path":[]},{"path":"https://ngreifer.github.io/fwb/reference/summary.fwb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize fwb Output — summary.fwb","text":"","code":"set.seed(123, \"L'Ecuyer-CMRG\") data(\"infert\")  fit_fun <- function(data, w) {   fit <- glm(case ~ spontaneous + induced, data = data,              family = \"quasibinomial\", weights = w)   coef(fit) }  fwb_out <- fwb(infert, fit_fun, R = 199, verbose = FALSE)  # Basic confidence interval for both estimates summary(fwb_out, ci.type = \"basic\") #>             Estimate Std. Error CI 2.5 % CI 97.5 % #> (Intercept)  -1.7079     0.2647  -2.2118   -1.2074 #> spontaneous   1.1972     0.2185   0.7532    1.6483 #> induced       0.4181     0.1975   0.0331    0.8116  # Just for \"induced\" coefficient; p-values requested summary(fwb_out, index = \"induced\", p.value = TRUE) #>         Estimate Std. Error CI 2.5 % CI 97.5 % z value Pr(>|z|)   #> induced   0.4181     0.1975   0.0178    0.7980    2.12    0.034 * #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"},{"path":"https://ngreifer.github.io/fwb/reference/vcovFWB.html","id":null,"dir":"Reference","previous_headings":"","what":"Fractional Weighted Bootstrap Covariance Matrix Estimation — vcovFWB","title":"Fractional Weighted Bootstrap Covariance Matrix Estimation — vcovFWB","text":"vcovFWB() estimates covariance matrix model coefficient estimates using fractional weighted bootstrap. serves drop-stats::vcov() sandwich::vcovBS(). Clustered covariances can requested.","code":""},{"path":"https://ngreifer.github.io/fwb/reference/vcovFWB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fractional Weighted Bootstrap Covariance Matrix Estimation — vcovFWB","text":"","code":"vcovFWB(   x,   cluster = NULL,   R = 1000,   start = FALSE,   wtype = getOption(\"fwb_wtype\", \"exp\"),   ...,   fix = FALSE,   use = \"pairwise.complete.obs\",   .coef = stats::coef,   verbose = FALSE,   cl = NULL )"},{"path":"https://ngreifer.github.io/fwb/reference/vcovFWB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fractional Weighted Bootstrap Covariance Matrix Estimation — vcovFWB","text":"x fitted model object, output call lm() glm(). model object must result function can updated using update() weights argument input non-integer case weights. cluster variable indicating clustering observations,     list (data.frame) thereof, formula specifying     variables fitted model used (see examples).     default (cluster = NULL), either attr(x, \"cluster\") used     () otherwise every observation assumed cluster. R number bootstrap replications. start logical; .coef(x) passed start update(x, weights = ...) call? case model x computed numeric iteration, may speed bootstrapping. wtype string; type weights use. Allowable options include \"exp\" (default), \"pois\", \"multinom\", \"mammen\". See fwb() details. See set_fwb_wtype() set global default. ... ignored. fix logical; TRUE, covariance matrix fixed positive semi-definite case . use character; specification passed stats::cov() handling missing coefficients/parameters. .coef function used extract coefficients fitted model. Must return numeric vector. default, stats::coef used, marginaleffects::get_coef can reliable choice models non-standard coef() method, like nnet::multinom() models. verbose logical; whether display progress bar. cl cluster object created parallelmakeCluster, integer indicate number child-processes (integer values ignored Windows) parallel evaluations, string \"future\" use future backend. See cl argument pbapplypblapply details. NULL, parallelization take place. See vignette(\"fwb-rep\") details.","code":""},{"path":"https://ngreifer.github.io/fwb/reference/vcovFWB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fractional Weighted Bootstrap Covariance Matrix Estimation — vcovFWB","text":"matrix containing covariance matrix estimate.","code":""},{"path":"https://ngreifer.github.io/fwb/reference/vcovFWB.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fractional Weighted Bootstrap Covariance Matrix Estimation — vcovFWB","text":"vcovFWB() functions like vcov()-like functions, sandwich package, particular, sandwichvcovBS, implements traditional bootstrap (bootstrap varieties linear models). Sets weights generated described documentation fwb(), supplied model re-fit using weights. fitted model already weights, multiplied bootstrap weights. lm objects, model re-fit using .lm.fit() speed, , similarly, glm objects re-fit using glm.fit() (whichever fitting method originally used). objects, update() used populate weights re-fit model (assumes fitting function accepts non-integer case weights weights argument). model accepts weights way, fwb() used instead; vcovFWB() inherently limited ability handle possible models. important original model fit using frequency weights (.e., weights allow one row data represent multiple full, identical, individual units) unless clustering used. See sandwichvcovBS sandwichvcovCL information clustering covariance matrices, see fwb() information clusters work fractional weighted bootstrap. clusters specified, cluster given bootstrap weight, members cluster given weight; estimation proceeds normal. default, cluster unspecified, unit considered cluster.","code":""},{"path":[]},{"path":"https://ngreifer.github.io/fwb/reference/vcovFWB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fractional Weighted Bootstrap Covariance Matrix Estimation — vcovFWB","text":"","code":"set.seed(123, \"L'Ecuyer-CMRG\") data(\"infert\") fit <- glm(case ~ spontaneous + induced, data = infert,              family = \"binomial\") lmtest::coeftest(fit, vcov. = vcovFWB, R = 200) #>  #> z test of coefficients: #>  #>             Estimate Std. Error z value  Pr(>|z|)     #> (Intercept) -1.70786    0.26445 -6.4581 1.060e-10 *** #> spontaneous  1.19721    0.21868  5.4746 4.384e-08 *** #> induced      0.41813    0.19723  2.1201     0.034 *   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  # Example from help(\"vcovBS\", package = \"sandwich\") data(\"PetersenCL\", package = \"sandwich\") m <- lm(y ~ x, data = PetersenCL)  # Note: this is not to compare performance, just to # demonstrate the syntax cbind(   \"BS\" = sqrt(diag(sandwich::vcovBS(m))),   \"FWB\" = sqrt(diag(vcovFWB(m))),   \"BS-cluster\" = sqrt(diag(sandwich::vcovBS(m, cluster = ~firm))),   \"FWB-cluster\" = sqrt(diag(vcovFWB(m, cluster = ~firm))) ) #>                     BS        FWB BS-cluster FWB-cluster #> (Intercept) 0.02834177 0.02862498 0.07244951  0.06554226 #> x           0.02642269 0.02837431 0.04724351  0.04789381  # Using `wtype = \"multinom\"` exactly reproduces # `sandwich::vcovBS()` set.seed(11) s <- sandwich::vcovBS(m, R = 200) set.seed(11) f <- vcovFWB(m, R = 200, wtype = \"multinom\")  all.equal(s, f) #> [1] TRUE # Using a custom argument to `.coef` set.seed(123) data(\"infert\")  fit <- nnet::multinom(education ~ age, data = infert,                       trace = FALSE)  # vcovFWB(fit, R = 200) ## error coef(fit) # coef() returns a matrix #>         (Intercept)         age #> 6-11yrs    5.482932 -0.09335993 #> 12+ yrs    9.372401 -0.21892472  # Write a custom function to extract vector of # coefficients (can also use marginaleffects::get_coef()) coef_multinom <- function(x) {   p <- t(coef(x))    setNames(as.vector(p),            paste(colnames(p)[col(p)],                  rownames(p)[row(p)],                  sep = \":\")) } coef_multinom(fit) # returns a vector #> 6-11yrs:(Intercept)         6-11yrs:age 12+ yrs:(Intercept)         12+ yrs:age  #>          5.48293157         -0.09335993          9.37240097         -0.21892472   vcovFWB(fit, R = 200, .coef = coef_multinom) #>                     6-11yrs:(Intercept)  6-11yrs:age 12+ yrs:(Intercept) #> 6-11yrs:(Intercept)           7.1290604 -0.202821220           6.7927253 #> 6-11yrs:age                  -0.2028212  0.005837787          -0.1923858 #> 12+ yrs:(Intercept)           6.7927253 -0.192385799           7.1922051 #> 12+ yrs:age                  -0.1922646  0.005504376          -0.2046696 #>                      12+ yrs:age #> 6-11yrs:(Intercept) -0.192264594 #> 6-11yrs:age          0.005504376 #> 12+ yrs:(Intercept) -0.204669617 #> 12+ yrs:age          0.005897351"},{"path":"https://ngreifer.github.io/fwb/news/index.html","id":"fwb-030","dir":"Changelog","previous_headings":"","what":"fwb 0.3.0","title":"fwb 0.3.0","text":"Added new confint() method fwb objects. Added new strata argument fwb() perform stratified bootstrapping within levels stratification variable. Added new drop0 argument fwb() drop units weights 0 bootstrap iteration. Added new .coef argument vcovFWB(). function can supplied extract vector coefficients fitted model bootstrap iteration default (stats::coef()) doesn’t return numeric vector (e.g., nnet::multinom() models). error message now thrown .coef doesn’t return numeric vector. Added support using future backend fwb() supplying cl = \"future\". Thanks Katya Zelevinsky suggestion. Added new vignette reproducibility parallelization, can accessed vignette(\"fwb-rep\"). fwb(), simple new default TRUE cases FALSE wtype \"multinom\". affect results reduce memory use large datasets avoiding computing bootstrap weights simultaneously. Note randomness statistic supplied fwb(), argument simple affects whether BCa confidence intervals can computed. See reproducibility vignette mentioned details. warning now thrown using fwb() simple = TRUE non-NULL cl random number generator kind \"L'Ecuyer-CMRG\". circumstances, results may replicate BCa confidence interval inaccurate. See reproducibility vignette mentioned details. Fixed bug names quantities produced fwb() statistic returns unnamed vector incorrect. BCa confidence intervals requested, error thrown number bootstrap replications smaller sample size. Documentation updates.","code":""},{"path":"https://ngreifer.github.io/fwb/news/index.html","id":"fwb-020","dir":"Changelog","previous_headings":"","what":"fwb 0.2.0","title":"fwb 0.2.0","text":"CRAN release: 2023-12-07 fwb() vcovFWB() now take additional argument, wtype, specifies weights drawn. default, \"exp\" still draw weights Exp(1)\\text{Exp}(1) distribution options, namely \"multinom\" multinomial integer weights (reproduce boot::boot() results exactly), \"poisson\" Poisson integer weights, \"mammen\" second-order accurate Mammen weights recommended Lihua Lei . (#4) New functions set_fwb_wtype() get_fwb_wtype() allow one set global defaults wtype argument fwb() vcovFWB()`.","code":""},{"path":"https://ngreifer.github.io/fwb/news/index.html","id":"fwb-012","dir":"Changelog","previous_headings":"","what":"fwb 0.1.2","title":"fwb 0.1.2","text":"CRAN release: 2023-10-02 Small updates bug fixes.","code":""},{"path":"https://ngreifer.github.io/fwb/news/index.html","id":"fwb-011","dir":"Changelog","previous_headings":"","what":"fwb 0.1.1","title":"fwb 0.1.1","text":"CRAN release: 2022-10-26 Fixed bugs related index argument various functions, including bugs estimated quantity given name. error messages may clearer.","code":""},{"path":"https://ngreifer.github.io/fwb/news/index.html","id":"fwb-010","dir":"Changelog","previous_headings":"","what":"fwb 0.1.0","title":"fwb 0.1.0","text":"CRAN release: 2022-09-19 First version!","code":""}]
